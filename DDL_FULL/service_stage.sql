BEGIN 
sys.dbms_logrep_imp.instantiate_schema(schema_name=>SYS_CONTEXT('USERENV','CURRENT_SCHEMA'), export_db_name=>'GDD6A141B5E83BD_APEXMARVAL', inst_scn=>'40016844149168');
COMMIT; 
END;
/
CREATE SEQUENCE  "WKSP_SERVICESTAGE"."MRVL_EMAIL_SEQ"  MINVALUE 1 MAXVALUE 99999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
CREATE SEQUENCE  "WKSP_SERVICESTAGE"."MRVL_HISTORY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
CREATE SEQUENCE  "WKSP_SERVICESTAGE"."MRVL_PHONE_SEQ"  MINVALUE 1 MAXVALUE 99999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
CREATE SEQUENCE  "WKSP_SERVICESTAGE"."MRVL_PROVIDERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
CREATE SEQUENCE  "WKSP_SERVICESTAGE"."MRVL_USERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_DEPARTMENTS" 
   (	"ID_MRVL_DEPARTMENT" NUMBER NOT NULL ENABLE, 
	"DEPARTMENT" VARCHAR2(100 CHAR) COLLATE "USING_NLS_COMP", 
	"JDE_VALUE" VARCHAR2(20) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "MRVL_DEPARTMENTS_PK" PRIMARY KEY ("ID_MRVL_DEPARTMENT")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_TYPE_PROVIDER" 
   (	"ID_MRVL_TYPE_PROVIDER" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"TYPE_PROVIDER" VARCHAR2(30 CHAR) COLLATE "USING_NLS_COMP", 
	"VALUE_JDE" CHAR(1) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "MRVL_TYPE_PROVIDER_PK" PRIMARY KEY ("ID_MRVL_TYPE_PROVIDER")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_PHONE" 
   (	"ID_MRVL_PHONE" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"PHONE_NUMBER" VARCHAR2(150 CHAR) COLLATE "USING_NLS_COMP", 
	"ID_MRVL_PROVIDERS" NUMBER, 
	"ID_MRVL_TYPE_PHONE" NUMBER, 
	 CONSTRAINT "MRVL_PHONE_PK" PRIMARY KEY ("ID_MRVL_PHONE")
  USING INDEX  ENABLE, 
	 CONSTRAINT "MRVL_PHONE_PV_FK" FOREIGN KEY ("ID_MRVL_PROVIDERS")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_PROVIDERS" ("ID_MRVL_PROVIDERS") ON DELETE CASCADE ENABLE, 
	 CONSTRAINT "MRVL_PHONE_FK_TP" FOREIGN KEY ("ID_MRVL_TYPE_PHONE")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_TYPE_PHONE" ("ID_MRVL_TYPE_PHONE") ON DELETE CASCADE ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_ROLES" 
   (	"ID_MRVL_ROL" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ROL_NAME" VARCHAR2(50 CHAR) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "MRVL_ROLES_PK" PRIMARY KEY ("ID_MRVL_ROL")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_BANKS" 
   (	"ID_MRVL_BANK" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"BANK_NAME" VARCHAR2(50 CHAR) COLLATE "USING_NLS_COMP", 
	"VALUE_JDE" VARCHAR2(5 CHAR) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "MRVL_BANKS_PK" PRIMARY KEY ("ID_MRVL_BANK")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_TYPE_EMAIL" 
   (	"ID_MRVL_TYPE_EMAIL" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"TYPE_EMAIL" VARCHAR2(30 CHAR) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "MRVL_TYPE_EMAIL_PK" PRIMARY KEY ("ID_MRVL_TYPE_EMAIL")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_AUDIT_FIELDS" 
   (	"COLUMN_NAME" VARCHAR2(150 CHAR) COLLATE "USING_NLS_COMP", 
	"IS_MODIFIED" NUMBER, 
	"TAX_ID" VARCHAR2(50 CHAR) COLLATE "USING_NLS_COMP", 
	"CREATED_DATE" TIMESTAMP (6) DEFAULT systimestamp
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_ACTIONS" 
   (	"ID_MRVL_ACTION" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NAME_ACTION" VARCHAR2(20 CHAR) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "MRVL_ACTIONS_PK" PRIMARY KEY ("ID_MRVL_ACTION")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_TYPE_TAX" 
   (	"ID_MRVL_TYPE_TAX" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"TYPE_TAX" VARCHAR2(100 CHAR) COLLATE "USING_NLS_COMP", 
	"VALUE_JDE" CHAR(1) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "MRVL_TYPE_TAX_PK" PRIMARY KEY ("ID_MRVL_TYPE_TAX")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_ACCOUNTS_TYPE" 
   (	"ID_MRVL_ACCOUNT_TYPE" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NAME_ACCOUNT" VARCHAR2(30 CHAR) COLLATE "USING_NLS_COMP", 
	"VALUE_JDE" VARCHAR2(2 CHAR) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "MRVL_ACCOUNTS_TYPE_PK" PRIMARY KEY ("ID_MRVL_ACCOUNT_TYPE")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_CITIES" 
   (	"ID_MRVL_CITY" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CITY" VARCHAR2(100 CHAR) COLLATE "USING_NLS_COMP", 
	"ID_MRVL_DEPARTMENT" NUMBER, 
	 CONSTRAINT "MRVL_CITIES_PK" PRIMARY KEY ("ID_MRVL_CITY")
  USING INDEX  ENABLE, 
	 CONSTRAINT "MRVL_CITIES_DP_FK" FOREIGN KEY ("ID_MRVL_DEPARTMENT")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_DEPARTMENTS" ("ID_MRVL_DEPARTMENT") ON DELETE CASCADE ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_EMAIL" 
   (	"ID_MRVL_EMAIL" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(300 CHAR) COLLATE "USING_NLS_COMP", 
	"ID_MRVL_PROVIDERS" NUMBER, 
	"ID_MRVL_TYPE_EMAIL" NUMBER, 
	 CONSTRAINT "MRVL_EMAIL_PK" PRIMARY KEY ("ID_MRVL_EMAIL")
  USING INDEX  ENABLE, 
	 CONSTRAINT "MRVL_EMAIL_PD_FK" FOREIGN KEY ("ID_MRVL_PROVIDERS")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_PROVIDERS" ("ID_MRVL_PROVIDERS") ON DELETE CASCADE ENABLE, 
	 CONSTRAINT "MRVL_EMAIL_FK_TE" FOREIGN KEY ("ID_MRVL_TYPE_EMAIL")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_TYPE_EMAIL" ("ID_MRVL_TYPE_EMAIL") ON DELETE CASCADE ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_TYPE_PHONE" 
   (	"ID_MRVL_TYPE_PHONE" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"TYPE_PHONE" VARCHAR2(25 CHAR) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "MRVL_TYPE_PHONE_PK" PRIMARY KEY ("ID_MRVL_TYPE_PHONE")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_PIVOT_DOCUMENTS" 
   (	"ID_DOC" NUMBER, 
	"DOC_NAME" VARCHAR2(100 CHAR) COLLATE "USING_NLS_COMP", 
	"DOC_FILE" BLOB, 
	"DOC_MIMETYPE" VARCHAR2(50 CHAR) COLLATE "USING_NLS_COMP", 
	"DOC_TIMESTAMP" TIMESTAMP (6) DEFAULT systimestamp, 
	"DOC_NIT" VARCHAR2(50 CHAR) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_PROVIDERS" 
   (	"ID_MRVL_PROVIDERS" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NAME_PROVIDER" VARCHAR2(255 CHAR) COLLATE "USING_NLS_COMP", 
	"ADDRES_PROVIDER" VARCHAR2(255 CHAR) COLLATE "USING_NLS_COMP", 
	"ID_MRVL_TYPE_PROVIDER" NUMBER, 
	"ID_MRVL_TYPE_TAX" NUMBER, 
	"COMERCIAL_REGISTRATION" VARCHAR2(255 CHAR) COLLATE "USING_NLS_COMP", 
	"COMERCIAL_REGISTRATION_DATE" DATE, 
	"LEGAL_REPRESENTATIVE" VARCHAR2(300 CHAR) COLLATE "USING_NLS_COMP", 
	"ID_MRVL_ACTCIIU" NUMBER, 
	"TAX_ID" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"ID_MRVL_DEPARTMENT" NUMBER, 
	"ID_MRVL_CITY" NUMBER, 
	"DOC_1" BLOB, 
	"DOC_2" BLOB, 
	"DOC_3" BLOB, 
	"DOC_4" BLOB, 
	"DOC_5" BLOB, 
	"DOC_6" BLOB, 
	"DOC_7" BLOB, 
	"DOC_8" BLOB, 
	"DOC_9" BLOB, 
	"ID_MRVL_ACCOUNT_TYPE" NUMBER, 
	"ID_MRVL_BANK" NUMBER, 
	"RES_GRAN_CONTRI" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"FECHA_RESOLUCION" DATE, 
	"RESP_AUTORRETENEDOR" VARCHAR2(52) COLLATE "USING_NLS_COMP", 
	"FECHA_RESP_AUTORRETENEDOR" DATE, 
	"TOTAL_ACTIVOS" NUMBER, 
	"TOTAL_PASIVOS" NUMBER, 
	"CAPITAL_AUTORIZADO" NUMBER, 
	"CAPITAL_SUSCRITO" NUMBER, 
	"CAPITAL_PAGADO" NUMBER, 
	"NOMBRE_TITULAR" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"NUMERO_CUENTA" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"IS_ENABLED" NUMBER DEFAULT 0, 
	"CREATED_DATE" TIMESTAMP (6) DEFAULT systimestamp, 
	"UPDATED_DATE" TIMESTAMP (6) DEFAULT systimestamp, 
	"IS_APPROVED" NUMBER DEFAULT 0, 
	"MIMETYPE_1" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"MIMETYPE_2" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"MIMETYPE_3" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"MIMETYPE_4" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"MIMETYPE_5" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"MIMETYPE_6" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"MIMETYPE_7" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"MIMETYPE_8" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"MIMETYPE_9" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"IS_EXPOSED" NUMBER, 
	"AN8" NUMBER, 
	"DOC_NAME_1" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"DOC_NAME_2" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"DOC_NAME_3" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"DOC_NAME_4" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"DOC_NAME_5" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"DOC_NAME_6" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"DOC_NAME_7" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"DOC_NAME_8" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"DOC_NAME_9" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "MRVL_PROVIDERS_PK" PRIMARY KEY ("ID_MRVL_PROVIDERS")
  USING INDEX  ENABLE, 
	 CONSTRAINT "MRVL_PROVIDERS_TT_FK" FOREIGN KEY ("ID_MRVL_TYPE_TAX")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_TYPE_TAX" ("ID_MRVL_TYPE_TAX") ON DELETE CASCADE ENABLE, 
	 CONSTRAINT "MRVL_PROVIDERS_TP_FK" FOREIGN KEY ("ID_MRVL_TYPE_PROVIDER")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_TYPE_PROVIDER" ("ID_MRVL_TYPE_PROVIDER") ON DELETE CASCADE ENABLE, 
	 CONSTRAINT "MRVL_PROVIDERS_DP_FK" FOREIGN KEY ("ID_MRVL_DEPARTMENT")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_DEPARTMENTS" ("ID_MRVL_DEPARTMENT") ON DELETE CASCADE ENABLE, 
	 CONSTRAINT "MRVL_PROVIDERS_CT_FK" FOREIGN KEY ("ID_MRVL_CITY")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_CITIES" ("ID_MRVL_CITY") ON DELETE CASCADE ENABLE, 
	 CONSTRAINT "MRVL_PROVIDERS_AC_FK" FOREIGN KEY ("ID_MRVL_ACTCIIU")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_ACTCIIU" ("ID_MRVL_ACTCIIU") ENABLE, 
	 CONSTRAINT "MRVL_PROVIDERS_FK_TA" FOREIGN KEY ("ID_MRVL_ACCOUNT_TYPE")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_ACCOUNTS_TYPE" ("ID_MRVL_ACCOUNT_TYPE") ON DELETE CASCADE ENABLE, 
	 CONSTRAINT "MRVL_PROVIDERS_FK_B" FOREIGN KEY ("ID_MRVL_BANK")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_BANKS" ("ID_MRVL_BANK") ON DELETE CASCADE ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_USERS" 
   (	"ID_MRVL_USER" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(50 CHAR) COLLATE "USING_NLS_COMP", 
	"PASS" VARCHAR2(100 CHAR) COLLATE "USING_NLS_COMP", 
	"IS_ACTIVE" NUMBER, 
	"ID_MRVL_ROL" NUMBER, 
	"LAST_ACCES_DATE" TIMESTAMP (6), 
	"TOKEN" CLOB COLLATE "USING_NLS_COMP", 
	"TIME_EXPIRED" TIMESTAMP (6), 
	"CREATED_DATE" TIMESTAMP (6), 
	 CONSTRAINT "MRVL_USERS_PK" PRIMARY KEY ("ID_MRVL_USER")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_ACTCIIU" 
   (	"ID_MRVL_ACTCIIU" NUMBER NOT NULL ENABLE, 
	"ACTCIIU" VARCHAR2(4000 CHAR) COLLATE "USING_NLS_COMP", 
	"JDE_VALUE" VARCHAR2(40) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "MRVL_ACTCIIU_PK" PRIMARY KEY ("ID_MRVL_ACTCIIU")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_DOCUMENT_TEMPLATE" 
   (	"ID_MRVL_DOCUMENT_TEMPLATE" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NAME_DOCUMENT" VARCHAR2(50 CHAR) COLLATE "USING_NLS_COMP", 
	"MIMETYPE_DOCUMENT" VARCHAR2(50 CHAR) COLLATE "USING_NLS_COMP", 
	"L_DOCUMENT" BLOB, 
	 CONSTRAINT "MRVL_DOCUMENT_TEMPLATE_PK" PRIMARY KEY ("ID_MRVL_DOCUMENT_TEMPLATE")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
CREATE TABLE "WKSP_SERVICESTAGE"."MRVL_HISTORY" 
   (	"ID_MRVL_HISTORY" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ID_MRVL_PROVIDERS" NUMBER, 
	"ID_MRVL_ACTION" NUMBER, 
	"COMENTARIOS" VARCHAR2(4000 CHAR) COLLATE "USING_NLS_COMP", 
	"CREATED_DATE" TIMESTAMP (6), 
	"EMAIL_USERNAME" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "MRVL_HYSTORY_PK" PRIMARY KEY ("ID_MRVL_HISTORY")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/

/

/

/

/

/

/

/

/

/

/

/

/

/

/

/

/

/

/

/
COMMENT ON TABLE "WKSP_SERVICESTAGE"."MRVL_DEPARTMENTS"  IS 'Departamentos de Colombia'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_TYPE_PROVIDER"."VALUE_JDE" IS 'Valor aceptado de JDE'
/
COMMENT ON TABLE "WKSP_SERVICESTAGE"."MRVL_TYPE_PROVIDER"  IS 'Tipo de Proveedor'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PHONE"."ID_MRVL_PHONE" IS 'Número Autoincrementa'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PHONE"."PHONE_NUMBER" IS 'Referencia de número telefonico'
/
COMMENT ON TABLE "WKSP_SERVICESTAGE"."MRVL_PHONE"  IS 'Teléfonos asociados a un solo Proveedor'
/
COMMENT ON TABLE "WKSP_SERVICESTAGE"."MRVL_ROLES"  IS 'Roles de Usuario Permitidos'
/
COMMENT ON TABLE "WKSP_SERVICESTAGE"."MRVL_BANKS"  IS 'Listas de Bancos inscritos'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_TYPE_TAX"."VALUE_JDE" IS 'Valores aceptados en JDE'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."ID_MRVL_PROVIDERS" IS 'Columna Autoincremental'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."NAME_PROVIDER" IS 'NOMBRE'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."ADDRES_PROVIDER" IS 'DIRECCIÓN'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."ID_MRVL_TYPE_PROVIDER" IS 'Tipo de Proveedor'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."ID_MRVL_TYPE_TAX" IS 'REGIMEN TRIBUATRIO'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."COMERCIAL_REGISTRATION" IS 'NÚMERO DE MATRICULA MERCANTIL'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."COMERCIAL_REGISTRATION_DATE" IS 'FECHA DE MATRICULA MERCANTIL'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."LEGAL_REPRESENTATIVE" IS 'REPRESENTANTE LEGAL'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."ID_MRVL_ACTCIIU" IS 'ACTIVIDAD CIIU'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."TAX_ID" IS 'NIT'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."ID_MRVL_DEPARTMENT" IS 'DEPARTAMENTO'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."ID_MRVL_CITY" IS 'CIUDAD'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."ID_MRVL_ACCOUNT_TYPE" IS 'TIPO DE CUENTA'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."ID_MRVL_BANK" IS 'BANCO'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."RES_GRAN_CONTRI" IS 'RESOLUCIÓN GRAN CONTRIBUYENTE'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."FECHA_RESOLUCION" IS 'FECHA RESOLUCION'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."RESP_AUTORRETENEDOR" IS 'RESPONSABLE_AUTERRETENEDOR'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."FECHA_RESP_AUTORRETENEDOR" IS 'FECHA RESPONSABLE AUTORRETENEDOR'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."TOTAL_ACTIVOS" IS 'TOTAL_ACTIVOS'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."TOTAL_PASIVOS" IS 'TOTAL_PASIVOS'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."CAPITAL_AUTORIZADO" IS 'CAPITAL AUTORIZADO'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."CAPITAL_SUSCRITO" IS 'CAPITAL SUSCRITO'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."CAPITAL_PAGADO" IS 'CAPITAL_PAGADO'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."NOMBRE_TITULAR" IS 'NOMBRE TITULAR'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."NUMERO_CUENTA" IS 'NUMERO CUENTA'
/
COMMENT ON COLUMN "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"."IS_ENABLED" IS 'INDICA SI EL FORMULARIO ESTA HABILITADO O NO'
/
COMMENT ON TABLE "WKSP_SERVICESTAGE"."MRVL_PROVIDERS"  IS 'Tabla de Proveedores'
/
COMMENT ON TABLE "WKSP_SERVICESTAGE"."MRVL_USERS"  IS 'Usuarios Registrados para autenticación'
/
COMMENT ON TABLE "WKSP_SERVICESTAGE"."MRVL_ACCOUNTS_TYPE"  IS 'Tipos de Cuenta Bancaria'
/
COMMENT ON TABLE "WKSP_SERVICESTAGE"."MRVL_CITIES"  IS 'Ciudades Asociadas a Departamentos'
/
COMMENT ON TABLE "WKSP_SERVICESTAGE"."MRVL_DOCUMENT_TEMPLATE"  IS 'Documentos de Referencia'
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_TYPE_PROVIDER" MODIFY ("ID_MRVL_TYPE_PROVIDER" GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH  LIMIT VALUE  CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE )
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_PHONE" MODIFY ("ID_MRVL_PHONE" GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH  LIMIT VALUE  CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE )
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_ROLES" MODIFY ("ID_MRVL_ROL" GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH  LIMIT VALUE  CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE )
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_BANKS" MODIFY ("ID_MRVL_BANK" GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH  LIMIT VALUE  CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE )
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_TYPE_EMAIL" MODIFY ("ID_MRVL_TYPE_EMAIL" GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH  LIMIT VALUE  CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE )
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_ACTIONS" MODIFY ("ID_MRVL_ACTION" GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH  LIMIT VALUE  CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE )
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_TYPE_TAX" MODIFY ("ID_MRVL_TYPE_TAX" GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH  LIMIT VALUE  CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE )
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_PROVIDERS" MODIFY ("ID_MRVL_PROVIDERS" GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH  LIMIT VALUE  CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE )
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_USERS" MODIFY ("ID_MRVL_USER" GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH  LIMIT VALUE  CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE )
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_ACCOUNTS_TYPE" MODIFY ("ID_MRVL_ACCOUNT_TYPE" GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH  LIMIT VALUE  CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE )
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_CITIES" MODIFY ("ID_MRVL_CITY" GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH  LIMIT VALUE  CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE )
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_EMAIL" MODIFY ("ID_MRVL_EMAIL" GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH  LIMIT VALUE  CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE )
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_TYPE_PHONE" MODIFY ("ID_MRVL_TYPE_PHONE" GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH  LIMIT VALUE  CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE )
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_DOCUMENT_TEMPLATE" MODIFY ("ID_MRVL_DOCUMENT_TEMPLATE" GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH  LIMIT VALUE  CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE )
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_HISTORY" MODIFY ("ID_MRVL_HISTORY" GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH  LIMIT VALUE  CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE )
/
CREATE OR REPLACE EDITIONABLE PACKAGE "WKSP_SERVICESTAGE"."MRVL_PKG_API_PROVIDERS" as

FUNCTION FN_GET_PROVIDERS(l_id_provider varchar2 default null) RETURN CLOB;

FUNCTION FN_GET_DOCUMENTS_PROVIDER(l_id_provider varchar2 default null, l_id_document varchar2 default null) RETURN CLOB;

FUNCTION FN_SET_PROVIDERS(l_id_provider varchar2 default null) RETURN CLOB;

/** 
 * Función que me permite convertir una fecha Gregorian to Julia
 * @param gregoriandate parametro que permite la entrada en formato FECHA SQL
 */
FUNCTION WS_FN_GREGORIANTOJULIAN(gregoriandate in DATE) return NUMBER;
/** 
 * * Función que me permite convertir una fecha Gregorian to Julia
 * @param JulianDate prametro de entrada tipo INT
 */
FUNCTION WS_FN_JULIANTOGREGORIAN(JulianDate IN INT)RETURN DATE;

end "MRVL_PKG_API_PROVIDERS";
/
CREATE OR REPLACE EDITIONABLE PACKAGE "WKSP_SERVICESTAGE"."MRVL_PKG_GET_DOCUMENT" as

 TYPE R_DATA_DOCUMENTS IS   RECORD
       (l_mimetype    varchar2(50),
        l_doc         blob
       );
 TYPE T_DATA_DOCUMENTS IS TABLE OF R_DATA_DOCUMENTS INDEX BY BINARY_INTEGER ; 

 v_data_documents T_DATA_DOCUMENTS;

 TYPE t_data_documents_return IS TABLE OF R_DATA_DOCUMENTS;

 FUNCTION WS_FN_FILL_DOC (l_nit varchar2,l_doc_id varchar2) RETURN BOOLEAN;

 FUNCTION WS_FN_GET_DOC (l_nit varchar2,l_doc_id varchar2) RETURN t_data_documents_return PIPELINED;

end "MRVL_PKG_GET_DOCUMENT";
/
CREATE OR REPLACE EDITIONABLE PACKAGE "WKSP_SERVICESTAGE"."MRVL_PKG_LOGIN" Is
 
  function fn_authenticate_user(p_Username  varchar2
                            ,p_Password  varchar2) return boolean;
                            
  procedure sp_process_login(p_Username in varchar2
                         ,p_Password in varchar2
                         ,p_App_Id in   Number
                         );
                            
end MRVL_PKG_LOGIN;
/
CREATE OR REPLACE EDITIONABLE PACKAGE "WKSP_SERVICESTAGE"."MRVL_PKG_UTL_BASE64" is
  function decode_base64(p_clob_in in clob) return blob;

  function encode_base64(p_blob_in in blob) return clob;
end mrvl_pkg_utl_base64;
/

ALTER PACKAGE "WKSP_SERVICESTAGE"."MRVL_PKG_API_PROVIDERS" 
  COMPILE SPECIFICATION 
    PLSQL_OPTIMIZE_LEVEL=  2
    PLSQL_CODE_TYPE=  INTERPRETED
    PLSQL_DEBUG=  FALSE    PLSCOPE_SETTINGS=  'IDENTIFIERS:NONE'  NLS_LENGTH_SEMANTICS= BYTE

 REUSE SETTINGS TIMESTAMP '2023-07-27 21:33:08'
/

ALTER PACKAGE "WKSP_SERVICESTAGE"."MRVL_PKG_GET_DOCUMENT" 
  COMPILE SPECIFICATION 
    PLSQL_OPTIMIZE_LEVEL=  2
    PLSQL_CODE_TYPE=  INTERPRETED
    PLSQL_DEBUG=  FALSE    PLSCOPE_SETTINGS=  'IDENTIFIERS:NONE'  NLS_LENGTH_SEMANTICS= BYTE

 REUSE SETTINGS TIMESTAMP '2023-07-23 03:40:16'
/

ALTER PACKAGE "WKSP_SERVICESTAGE"."MRVL_PKG_LOGIN" 
  COMPILE SPECIFICATION 
    PLSQL_OPTIMIZE_LEVEL=  2
    PLSQL_CODE_TYPE=  INTERPRETED
    PLSQL_DEBUG=  FALSE    PLSCOPE_SETTINGS=  'IDENTIFIERS:NONE'  NLS_LENGTH_SEMANTICS= BYTE

 REUSE SETTINGS TIMESTAMP '2023-07-18 20:05:05'
/

ALTER PACKAGE "WKSP_SERVICESTAGE"."MRVL_PKG_UTL_BASE64" 
  COMPILE SPECIFICATION 
    PLSQL_OPTIMIZE_LEVEL=  2
    PLSQL_CODE_TYPE=  INTERPRETED
    PLSQL_DEBUG=  FALSE    PLSCOPE_SETTINGS=  'IDENTIFIERS:NONE'  NLS_LENGTH_SEMANTICS= BYTE

 REUSE SETTINGS TIMESTAMP '2023-07-18 17:26:15'
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW "WKSP_SERVICESTAGE"."VIEW_MRVL_DOC_TEMPLATE" ("DESCRIPCION", "DOCUMENTO", "IMAGE", "L_DOCUMENT", "MIMETYPE") DEFAULT COLLATION "USING_NLS_COMP"  AS 
  SELECT DESCRIPCION||'pdf' DESCRIPCION,DOCUMENTO,IMAGE,L_DOCUMENT,'application/pdf' MIMETYPE FROM (
SELECT 'Original Certificado Existencia y Representación Legal con máximo 30 días de expedición.' DESCRIPCION
,1 DOCUMENTO
,CASE WHEN dbms_lob.getlength(DOC_1)>=0 OR (SELECT  c003 FROM APEX_collections where collection_name='UPLOADED_FILES' and c003='1' and rownum<=1)='1'
THEN HTF.IMG(curl=>'#APP_FILES#icons/check.png'
                    ,calign=>null
                    ,calt=>'DOCUMENT_EXISTS'
                    ,cismap=>null
                    ,cattributes=>'width=15 heigth=15') 
ELSE 
     HTF.IMG(curl=>'#APP_FILES#icons/x.png'
                    ,calign=>null
                    ,calt=>'DOCUMENT_NOT_EXISTS'
                    ,cismap=>null
                    ,cattributes=>'width=15 heigth=15') 
END IMAGE,
NULL L_DOCUMENTO
FROM MRVL_PROVIDERS A INNER JOIN MRVL_EMAIL B ON A.ID_MRVL_PROVIDERS=B.ID_MRVL_PROVIDERS
WHERE UPPER(B.EMAIL)=UPPER('mzabala19@gmail.com')
UNION ALL
SELECT 'Rut Actualizada con máximo 30 días de generación de documento.' DESCRIPCION
,2 DOCUMENTO
,CASE WHEN dbms_lob.getlength(DOC_2)>=0 OR (SELECT  c003 FROM APEX_collections where collection_name='UPLOADED_FILES' and c003='2' and rownum<=1)='2'
THEN HTF.IMG(curl=>'#APP_FILES#icons/check.png'
                    ,calign=>null
                    ,calt=>'DOCUMENT_EXISTS'
                    ,cismap=>null
                    ,cattributes=>'width=15 heigth=15') 
ELSE 
     HTF.IMG(curl=>'#APP_FILES#icons/x.png'
                    ,calign=>null
                    ,calt=>'DOCUMENT_NOT_EXISTS'
                    ,cismap=>null
                    ,cattributes=>'width=15 heigth=15') 
END IMAGE,
NULL
FROM MRVL_PROVIDERS A INNER JOIN MRVL_EMAIL B ON A.ID_MRVL_PROVIDERS=B.ID_MRVL_PROVIDERS
WHERE UPPER(B.EMAIL)=UPPER('mzabala19@gmail.com')
UNION ALL
SELECT 'Documento de Identidad Representante Legal.' DESCRIPCION
,3 DOCUMENTO
,CASE WHEN dbms_lob.getlength(DOC_3)>=0 OR (SELECT  c003 FROM APEX_collections where collection_name='UPLOADED_FILES' and c003='3' and rownum<=1)='3'
THEN HTF.IMG(curl=>'#APP_FILES#icons/check.png'
                    ,calign=>null
                    ,calt=>'DOCUMENT_EXISTS'
                    ,cismap=>null
                    ,cattributes=>'width=15 heigth=15') 
ELSE 
     HTF.IMG(curl=>'#APP_FILES#icons/x.png'
                    ,calign=>null
                    ,calt=>'DOCUMENT_NOT_EXISTS'
                    ,cismap=>null
                    ,cattributes=>'width=15 heigth=15') 
END IMAGE,
NULL
FROM MRVL_PROVIDERS A INNER JOIN MRVL_EMAIL B ON A.ID_MRVL_PROVIDERS=B.ID_MRVL_PROVIDERS
WHERE UPPER(B.EMAIL)=UPPER('mzabala19@gmail.com')
UNION ALL
SELECT 'Carta firmada de autorización y notificación de pagos por transferencia.' DESCRIPCION
,4 DOCUMENTO
,CASE WHEN dbms_lob.getlength(DOC_4)>=0 OR (SELECT  c003 FROM APEX_collections where collection_name='UPLOADED_FILES' and c003='4' and rownum<=1)='4'
THEN HTF.IMG(curl=>'#APP_FILES#icons/check.png'
                    ,calign=>null
                    ,calt=>'DOCUMENT_EXISTS'
                    ,cismap=>null
                    ,cattributes=>'width=15 heigth=15') 
ELSE 
     HTF.IMG(curl=>'#APP_FILES#icons/x.png'
                    ,calign=>null
                    ,calt=>'DOCUMENT_NOT_EXISTS'
                    ,cismap=>null
                    ,cattributes=>'width=15 heigth=15') 
END IMAGE,
(select dbms_lob.getlength(l_document) from mrvl_document_template where ID_MRVL_DOCUMENT_TEMPLATE=1) L_DOCUMENT
FROM MRVL_PROVIDERS A INNER JOIN MRVL_EMAIL B ON A.ID_MRVL_PROVIDERS=B.ID_MRVL_PROVIDERS
WHERE UPPER(B.EMAIL)=UPPER('mzabala19@gmail.com')
UNION ALL
SELECT 'Certificación bancaría no mayor a 30 días.' DESCRIPCION
,5 DOCUMENTO
,CASE WHEN dbms_lob.getlength(DOC_5)>=0 OR (SELECT  c003 FROM APEX_collections where collection_name='UPLOADED_FILES' and c003='5' and rownum<=1)='5'
THEN HTF.IMG(curl=>'#APP_FILES#icons/check.png'
                    ,calign=>null
                    ,calt=>'DOCUMENT_EXISTS'
                    ,cismap=>null
                    ,cattributes=>'width=15 heigth=15') 
ELSE 
     HTF.IMG(curl=>'#APP_FILES#icons/x.png'
                    ,calign=>null
                    ,calt=>'DOCUMENT_NOT_EXISTS'
                    ,cismap=>null
                    ,cattributes=>'width=15 heigth=15') 
END IMAGE,
NULL
FROM MRVL_PROVIDERS A INNER JOIN MRVL_EMAIL B ON A.ID_MRVL_PROVIDERS=B.ID_MRVL_PROVIDERS
WHERE UPPER(B.EMAIL)=UPPER('mzabala19@gmail.com')
UNION ALL
SELECT 'Firma de Carta de conocimiento y aceptación de proceso para Facturación Electrónica.' DESCRIPCION
,6 DOCUMENTO
,CASE WHEN dbms_lob.getlength(DOC_6)>=0 OR (SELECT  c003 FROM APEX_collections where collection_name='UPLOADED_FILES' and c003='6' and rownum<=1)='6'
THEN HTF.IMG(curl=>'#APP_FILES#icons/check.png'
                    ,calign=>null
                    ,calt=>'DOCUMENT_EXISTS'
                    ,cismap=>null
                    ,cattributes=>'width=15 heigth=15') 
ELSE 
     HTF.IMG(curl=>'#APP_FILES#icons/x.png'
                    ,calign=>null
                    ,calt=>'DOCUMENT_NOT_EXISTS'
                    ,cismap=>null
                    ,cattributes=>'width=15 heigth=15') 
END IMAGE,
(select dbms_lob.getlength(l_document) from mrvl_document_template where ID_MRVL_DOCUMENT_TEMPLATE=2) L_DOCUMENT
FROM MRVL_PROVIDERS A INNER JOIN MRVL_EMAIL B ON A.ID_MRVL_PROVIDERS=B.ID_MRVL_PROVIDERS
WHERE UPPER(B.EMAIL)=UPPER('mzabala19@gmail.com')
UNION ALL
SELECT 'Firma declaración prevención y control LA/FT/FPADM persona júridica.' DESCRIPCION
,7 DOCUMENTO
,CASE WHEN dbms_lob.getlength(DOC_7)>=0 OR (SELECT  c003 FROM APEX_collections where collection_name='UPLOADED_FILES' and c003='7' and rownum<=1)='7'
THEN HTF.IMG(curl=>'#APP_FILES#icons/check.png'
                    ,calign=>null
                    ,calt=>'DOCUMENT_EXISTS'
                    ,cismap=>null
                    ,cattributes=>'width=15 heigth=15') 
ELSE 
     HTF.IMG(curl=>'#APP_FILES#icons/x.png'
                    ,calign=>null
                    ,calt=>'DOCUMENT_NOT_EXISTS'
                    ,cismap=>null
                    ,cattributes=>'width=15 heigth=15') 
END IMAGE,
NULL
FROM MRVL_PROVIDERS A INNER JOIN MRVL_EMAIL B ON A.ID_MRVL_PROVIDERS=B.ID_MRVL_PROVIDERS
WHERE UPPER(B.EMAIL)=UPPER('mzabala19@gmail.com')
UNION ALL
SELECT 'Estado de situación financiera y estado de resultados con corte a los 2 últimos periodos anuales cerrados.' DESCRIPCION
,8 DOCUMENTO
,CASE WHEN dbms_lob.getlength(DOC_8)>=0 OR (SELECT  c003 FROM APEX_collections where collection_name='UPLOADED_FILES' and c003='8' and rownum<=1)='8'
THEN HTF.IMG(curl=>'#APP_FILES#icons/check.png'
                    ,calign=>null
                    ,calt=>'DOCUMENT_EXISTS'
                    ,cismap=>null
                    ,cattributes=>'width=15 heigth=15') 
ELSE 
     HTF.IMG(curl=>'#APP_FILES#icons/x.png'
                    ,calign=>null
                    ,calt=>'DOCUMENT_NOT_EXISTS'
                    ,cismap=>null
                    ,cattributes=>'width=15 heigth=15') 
END IMAGE,
NULL
FROM MRVL_PROVIDERS A INNER JOIN MRVL_EMAIL B ON A.ID_MRVL_PROVIDERS=B.ID_MRVL_PROVIDERS
WHERE UPPER(B.EMAIL)=UPPER('mzabala19@gmail.com')
UNION ALL
SELECT 'Compisición Accionaría.' DESCRIPCION
,9 DOCUMENTO
,CASE WHEN dbms_lob.getlength(DOC_9)>=0 OR (SELECT  c003 FROM APEX_collections where collection_name='UPLOADED_FILES' and c003='9' and rownum<=1)='9'
THEN HTF.IMG(curl=>'#APP_FILES#icons/check.png'
                    ,calign=>null
                    ,calt=>'DOCUMENT_EXISTS'
                    ,cismap=>null
                    ,cattributes=>'width=15 heigth=15') 
ELSE 
     HTF.IMG(curl=>'#APP_FILES#icons/x.png'
                    ,calign=>null
                    ,calt=>'DOCUMENT_NOT_EXISTS'
                    ,cismap=>null
                    ,cattributes=>'width=15 heigth=15') 
END IMAGE,
NULL
FROM (MRVL_PROVIDERS A INNER JOIN MRVL_EMAIL B ON A.ID_MRVL_PROVIDERS=B.ID_MRVL_PROVIDERS)
WHERE UPPER(B.EMAIL)=UPPER('mzabala19@gmail.com')
) LEFT JOIN mrvl_document_template on documento=ID_MRVL_DOCUMENT_TEMPLATE ORDER BY DOCUMENTO
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "WKSP_SERVICESTAGE"."MRVL_PKG_LOGIN" is
function fn_authenticate_user(p_Username varchar2,p_Password  varchar2) return boolean as
        v_Password varchar2(4000);
        p_Password_Hash varchar2(4000);
        v_Email    MRVL_USERS.EMAIL%Type;
        v_Active   MRVL_USERS.IS_ACTIVE%Type;
        v_NAMEPROV MRVL_PROVIDERS.NAME_PROVIDER%Type;
        v_rol      MRVL_USERS.ID_MRVL_ROL%Type;
        v_isEnabld MRVL_PROVIDERS.IS_ENABLED%Type;
        v_isAppro  MRVL_PROVIDERS.IS_APPROVED%Type;
    Begin
        select STANDARD_HASH(p_Password,'SHA256') into p_Password_Hash FROM DUAL;
        If p_Username is Null or p_Password is null then
            -- Le indica al usuario que los inputs estan vacios, retorna False.
            Apex_Util.Set_Session_State('LOGIN_MESSAGE','Por favor ingrese usuario y contraseña');
            return False;
        end if;
        Begin
            select PASS,A.EMAIL,IS_ACTIVE,C.NAME_PROVIDER,A.ID_MRVL_ROL,C.IS_ENABLED,C.IS_APPROVED into  v_Password,v_Email,v_Active,v_NAMEPROV,v_rol,v_isEnabld,v_isAppro
            from (MRVL_USERS A
            LEFT JOIN MRVL_EMAIL B ON A.EMAIL=B.EMAIL) LEFT JOIN MRVL_PROVIDERS C ON C.ID_MRVL_PROVIDERS=B.ID_MRVL_PROVIDERS
            where upper(A.EMAIL) = upper(p_Username);
            Exception
                When No_Data_Found Then
                -- El usuario no se encuentra registrado en la base de datos, retorna False.
                Apex_Util.Set_Session_State('LOGIN_MESSAGE','El usuario: '||p_Username||' no se encuentra registrado en el sistema.');   
               return False;
        End;
        If v_Active = 0 then
            -- Le indica al usuario que se encuntra desactivado, retorna False.
            Apex_Util.Set_Session_State('LOGIN_MESSAGE','El usuario: '||p_Username||' se encuentra deshabilitado, por favor contacte con el administrador.');
            return False;
        end if;
        If p_Password_Hash != v_Password then
            -- Le indica al usuario que la contraseña es incorrecta, retorna False.
            Apex_Util.Set_Session_State('LOGIN_MESSAGE','La contraseña para el usuario '||p_Username||' es incorrecta.');
            return False;
        end if;
         ---
         -- Write user information to Session.
         --
         Apex_Util.Set_Session_State('SESSION_EMAIL'
                                    ,v_Email);
            
        Apex_Util.Set_Session_State('NAME_PROVIDER'
                                    ,v_NAMEPROV); 
        
        Apex_Util.Set_Session_State('IS_ENABLED'
                                    ,v_isEnabld); 
                                    
        Apex_Util.Set_Session_State('IS_APPROVED'
                                    ,v_isAppro); 
        return True;
End fn_authenticate_user;
Procedure sp_Process_Login(p_Username Varchar2, p_Password  Varchar2,p_App_Id    Number) As v_Result Boolean := False;
    
    CURSOR c_getROl (vci_username varchar2) IS
    select A.ID_MRVL_ROL  from MRVL_USERS A
    WHERE upper(A.EMAIL) = upper(vci_username);
    
    l_getROl c_getROl%rowtype;
    vb_exist_rol boolean;
    Begin
        v_Result := fn_Authenticate_User(p_Username,p_Password);
        
        OPEN c_getROl(p_Username);
            FETCH c_getROl into l_getROl;
            vb_exist_rol := c_getROl%FOUND;
        CLOSE c_getROl;
        
        If v_Result = True and l_getROl.ID_MRVL_ROL = 2 Then
            -- Envia al usuario a la pagina principal
            Wwv_Flow_Custom_Auth_Std.Post_Login(p_Username -- p_User_Name
                                ,p_Password -- p_Password
                                ,v('APP_SESSION') -- p_Session_Id
                                ,p_App_Id || ':1' -- p_Flow_page
                                );
        ELSIF v_Result = True and l_getROl.ID_MRVL_ROL = 1 Then
             -- Envia al usuario a la pagina principal
            Wwv_Flow_Custom_Auth_Std.Post_Login(p_Username -- p_User_Name
                                ,p_Password -- p_Password
                                ,v('APP_SESSION') -- p_Session_Id
                                ,p_App_Id || ':7' -- p_Flow_page
                                );
        ELSIF v_Result = True and l_getROl.ID_MRVL_ROL = 3 Then
             -- Envia al usuario a la pagina principal
            Wwv_Flow_Custom_Auth_Std.Post_Login(p_Username -- p_User_Name
                                ,p_Password -- p_Password
                                ,v('APP_SESSION') -- p_Session_Id
                                ,p_App_Id || ':7' -- p_Flow_page
                                );
        Else
            -- Envia al usuario de nuevo al login
            Owa_Util.Redirect_Url('f?p=&APP_ID.:9999:&SESSION.');
        End If;
    End sp_Process_Login;
end "MRVL_PKG_LOGIN";
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "WKSP_SERVICESTAGE"."MRVL_PKG_API_PROVIDERS" as

    FUNCTION FN_GET_PROVIDERS(l_id_provider varchar2 default null) RETURN CLOB
    AS
        resultado clob;
    BEGIN

        APEX_JSON.initialize_clob_output;
        APEX_JSON.open_object; -- {
        APEX_JSON.open_array('proveedoresAprobados'); -- controlAccounts: [
        FOR n IN (select A.ID_MRVL_PROVIDERS
                    ,A.NAME_PROVIDER
                    ,A.ADDRES_PROVIDER
                    ,B.VALUE_JDE||'-'||B.TYPE_PROVIDER PROVIDER
                    ,C.VALUE_JDE||'-'||C.TYPE_TAX TYPE_TAX
                    ,A.COMERCIAL_REGISTRATION
                    ,A.COMERCIAL_REGISTRATION_DATE
                    ,A.LEGAL_REPRESENTATIVE
                    ,D.JDE_VALUE||'-'||D.ACTCIIU TYPE_CIIU
                    ,A.TAX_ID
                    ,E.DEPARTMENT
                    ,F.CITY
                    ,G.VALUE_JDE||'-'||G.NAME_ACCOUNT TYPE_ACCOUNT
                    ,H.VALUE_JDE||'-'||H.BANK_NAME  BANK_NAME
                    ,A.RES_GRAN_CONTRI
                    ,A.FECHA_RESOLUCION
                    ,A.RESP_AUTORRETENEDOR
                    ,A.FECHA_RESP_AUTORRETENEDOR
                    ,A.NOMBRE_TITULAR
                    ,A.NUMERO_CUENTA
                    ,A.IS_ENABLED
                    ,A.IS_APPROVED
                    ,A.AN8
                    from ((((((WKSP_SERVICESTAGE.mrvl_providers A
                    LEFT JOIN WKSP_SERVICESTAGE.mrvl_type_provider B ON A.ID_MRVL_TYPE_PROVIDER=B.ID_MRVL_TYPE_PROVIDER)
                    LEFT JOIN WKSP_SERVICESTAGE.mrvl_type_tax C ON A.ID_MRVL_TYPE_TAX=C.ID_MRVL_TYPE_TAX)
                    LEFT JOIN WKSP_SERVICESTAGE.mrvl_actciiu D ON A.ID_MRVL_ACTCIIU=D.ID_MRVL_ACTCIIU)
                    LEFT JOIN WKSP_SERVICESTAGE.MRVL_DEPARTMENTS E ON A.ID_MRVL_DEPARTMENT=E.ID_MRVL_DEPARTMENT)
                    LEFT JOIN WKSP_SERVICESTAGE.mrvl_cities F ON A.ID_MRVL_CITY=F.ID_MRVL_CITY)
                    LEFT JOIN WKSP_SERVICESTAGE.MRVL_ACCOUNTS_TYPE G ON A.ID_MRVL_ACCOUNT_TYPE=G.ID_MRVL_ACCOUNT_TYPE)
                    LEFT JOIN WKSP_SERVICESTAGE.MRVL_BANKS H ON A.ID_MRVL_BANK=H.ID_MRVL_BANK
                    WHERE A.IS_APPROVED=1
                    AND TAX_ID=nvl(decode(l_id_provider,'0',null,l_id_provider),TAX_ID)
                    AND (IS_EXPOSED is null)
                    ) LOOP
            APEX_JSON.open_object; -- {
                    APEX_JSON.write('id',n.ID_MRVL_PROVIDERS,true);
                    APEX_JSON.write('nombre',n.NAME_PROVIDER,true);
                    APEX_JSON.write('direccion',n.ADDRES_PROVIDER,true);
                    APEX_JSON.write('tipoPersona',n.PROVIDER,true);
                    APEX_JSON.write('regimenTributario',n.TYPE_TAX,true);
                    APEX_JSON.write('matriculaMercantil',n.COMERCIAL_REGISTRATION,true);
                    APEX_JSON.write('fechaMatriculaMercantil',n.COMERCIAL_REGISTRATION_DATE,true);
                    APEX_JSON.write('representanteLega',n.LEGAL_REPRESENTATIVE,true);
                    APEX_JSON.write('ciiu',n.TYPE_CIIU,true);
                    APEX_JSON.write('nit',n.TAX_ID,true);
                    APEX_JSON.write('an8',n.an8,true);
                    APEX_JSON.write('departamento',n.DEPARTMENT,true);
                    APEX_JSON.write('ciudad',n.CITY,true);
                    APEX_JSON.write('tipoCuenta',n.TYPE_ACCOUNT,true);
                    APEX_JSON.write('nombreBanco',n.BANK_NAME,true);
                    APEX_JSON.write('nombreTitular',n.NOMBRE_TITULAR,true);
                    APEX_JSON.write('numeroCuenta',n.NUMERO_CUENTA,true);
                    APEX_JSON.write('resolucionGranContri',n.RES_GRAN_CONTRI,true);
                    APEX_JSON.write('fechaResolucion',n.FECHA_RESOLUCION,true);
                    APEX_JSON.write('fechaRespAutorretenedor',n.FECHA_RESP_AUTORRETENEDOR,true);
                    APEX_JSON.write('respAutorretenedor',n.RESP_AUTORRETENEDOR,true);
                    APEX_JSON.open_array('listaCorreos'); -- emailList: [('emailList'); -- {
                            FOR j IN (SELECT * FROM WKSP_SERVICESTAGE.MRVL_EMAIL 
                                        A INNER JOIN WKSP_SERVICESTAGE.MRVL_TYPE_EMAIL B 
                                        ON  A.ID_MRVL_TYPE_EMAIL=B.ID_MRVL_TYPE_EMAIL
                                     WHERE ID_MRVL_PROVIDERS=n.ID_MRVL_PROVIDERS)
                            LOOP
                                APEX_JSON.open_object; -- {
                                    APEX_JSON.write('correo',j.email,true);
                                    APEX_JSON.write('tipoCorreo',j.type_email,true);
                                APEX_JSON.close_object; -- }   
                            END LOOP;
                            
                    APEX_JSON.close_array; -- ] emailList
                    APEX_JSON.open_array('listaNumerosTelefonos'); -- emailList: [('emailList'); -- {
                            FOR k IN (SELECT * FROM WKSP_SERVICESTAGE.MRVL_PHONE A 
                                        INNER JOIN WKSP_SERVICESTAGE.MRVL_TYPE_PHONE B 
                                        ON  A.ID_MRVL_TYPE_PHONE=B.ID_MRVL_TYPE_PHONE 
                                        WHERE ID_MRVL_PROVIDERS=1)
                            LOOP
                                APEX_JSON.open_object; -- {
                                    APEX_JSON.write('telefono',k.phone_number,true);
                                    APEX_JSON.write('tipoTelefono',k.type_phone,true);
                                APEX_JSON.close_object; -- }   
                            END LOOP;
                            
                    APEX_JSON.close_array; -- ] emailList
            APEX_JSON.close_object; -- }   
        END LOOP;
        APEX_JSON.close_array; -- ] data
        APEX_JSON.close_object; -- }
        
    resultado:=APEX_JSON.get_clob_output;
    APEX_JSON.free_output;
    return resultado;
    END FN_GET_PROVIDERS;

    FUNCTION FN_GET_DOCUMENTS_PROVIDER(l_id_provider varchar2 default null, l_id_document varchar2 default null) RETURN CLOB
    AS
        resultado clob;
    BEGIN
        APEX_JSON.initialize_clob_output;
        APEX_JSON.open_object; -- {
        APEX_JSON.open_array('documentosProveedor'); -- controlAccounts: [
        FOR n IN (SELECT nombre,doc_id,MIMETYPE,mrvl_pkg_utl_base64.encode_base64(DOC_BLOB) DOCUMENTO FROM (  
                      SELECT 'Original Certificado Existencia y Representación Legal con máximo 30 días de expedición.' nombre,'1' doc_id,DOC_1 DOC_BLOB,MIMETYPE_1 MIMETYPE FROM MRVL_PROVIDERS
                      WHERE TAX_ID=nvl(decode(l_id_provider,'0',null,l_id_provider),TAX_ID)
                      UNION ALL
                      SELECT 'Rut Actualizada con máximo 30 días de generación de documento.','2'doc_id,DOC_2,MIMETYPE_2 FROM MRVL_PROVIDERS
                      WHERE TAX_ID=nvl(decode(l_id_provider,'0',null,l_id_provider),TAX_ID)
                      UNION ALL
                      SELECT 'Documento de Identidad Representante Legal.','3' doc_id,DOC_3,MIMETYPE_3 FROM MRVL_PROVIDERS
                      WHERE TAX_ID=nvl(decode(l_id_provider,'0',null,l_id_provider),TAX_ID)
                      UNION ALL
                      SELECT 'Carta firmada de autorización y notificación de pagos por transferencia.','4' doc_id,DOC_4,MIMETYPE_4 FROM MRVL_PROVIDERS
                      WHERE TAX_ID=nvl(decode(l_id_provider,'0',null,l_id_provider),TAX_ID)
                      UNION ALL
                      SELECT 'Certificación bancaría no mayor a 30 días.','5' doc_id,DOC_5,MIMETYPE_5 FROM MRVL_PROVIDERS
                      WHERE TAX_ID=nvl(decode(l_id_provider,'0',null,l_id_provider),TAX_ID)
                      UNION ALL
                      SELECT 'Firma de Carta de conocimiento y aceptación de proceso para Facturación Electrónica.','6' doc_id,DOC_6,MIMETYPE_6 FROM MRVL_PROVIDERS
                      WHERE TAX_ID=nvl(decode(l_id_provider,'0',null,l_id_provider),TAX_ID)
                      UNION ALL
                      SELECT 'Firma declaración prevención y control LA/FT/FPADM persona júridica.','7' doc_id,DOC_7,MIMETYPE_7 FROM MRVL_PROVIDERS
                      WHERE TAX_ID=nvl(decode(l_id_provider,'0',null,l_id_provider),TAX_ID)
                      UNION ALL
                      SELECT 'Estado de situación financiera y estado de resultados con corte a los 2 últimos periodos anuales cerrados.','8' doc_id,DOC_8,MIMETYPE_8 FROM MRVL_PROVIDERS
                      WHERE TAX_ID=nvl(decode(l_id_provider,'0',null,l_id_provider),TAX_ID)
                      UNION ALL
                      SELECT 'Composición Accionaría.','9' doc_id,DOC_9,MIMETYPE_9 FROM MRVL_PROVIDERS
                      WHERE TAX_ID=nvl(decode(l_id_provider,'0',null,l_id_provider),TAX_ID)
                      )
                      where doc_id=nvl(decode(l_id_document,'0',null,l_id_document),doc_id)) LOOP
            APEX_JSON.open_object; -- {
                    APEX_JSON.write('id',n.doc_id,true);
                    APEX_JSON.write('nombre',n.nombre,true);
                    APEX_JSON.write('mimetype',n.mimetype,true);
                    APEX_JSON.write('document',n.DOCUMENTO,true);
            APEX_JSON.close_object; -- }   
        END LOOP;
        APEX_JSON.close_array; -- ] data
        APEX_JSON.close_object; -- }
     
     
    resultado:=APEX_JSON.get_clob_output;
    APEX_JSON.free_output;
    return resultado;
    END FN_GET_DOCUMENTS_PROVIDER;

    FUNCTION FN_SET_PROVIDERS(l_id_provider varchar2 default null) RETURN CLOB
    AS
    pragma autonomous_transaction;
    l_tax_id varchar2(50);
    resultado clob;
    BEGIN
        UPDATE MRVL_PROVIDERS SET IS_EXPOSED=1 WHERE ID_MRVL_PROVIDERS=l_id_provider returning tax_id into l_tax_id;
        COMMIT;
        APEX_JSON.initialize_clob_output;
        APEX_JSON.open_object; -- {
            IF l_tax_id is not null then
                APEX_JSON.write('resultado','Actualizado Exitosamente',true);
                APEX_JSON.write('nit',l_tax_id,true);
            ELSE
                APEX_JSON.write('resultado','ID No encontrado',true);
            END IF;
        APEX_JSON.close_object; -- }
        resultado:=APEX_JSON.get_clob_output;
        APEX_JSON.free_output;
        return resultado;    
    END FN_SET_PROVIDERS;

function WS_FN_GREGORIANTOJULIAN (gregoriandate in DATE)
    return NUMBER
    is
    JulianDate int;
    begin
    SELECT ((TO_CHAR(GregorianDate, 'YYYY')-1900)*1000) + CAST(GregorianDate-TO_DATE(CONCAT('01/01/',TO_CHAR(GregorianDate, 'YYYY'))) AS INT) + 1
    INTO JulianDate
    FROM DUAL;
    dbms_output.put_line(JulianDate);
    RETURN (JulianDate);
    end WS_FN_GREGORIANTOJULIAN;  
    
  function WS_FN_JULIANTOGREGORIAN(JulianDate IN INT)
    RETURN DATE
    IS GregorianDate DATE;
    BEGIN
    SELECT TO_DATE(CONCAT(TO_CHAR(1900+CAST(JulianDate/1000 AS INT)),'0101'),'YYYY-MM-DD')+CAST(SUBSTR(JulianDate,4,3) AS INT)-1
    INTO GregorianDate
    FROM DUAL;
    
    RETURN (GregorianDate);
    END WS_FN_JULIANTOGREGORIAN;

end "MRVL_PKG_API_PROVIDERS";
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "WKSP_SERVICESTAGE"."MRVL_PKG_UTL_BASE64" is
  function decode_base64(p_clob_in in clob) return blob is
    v_blob blob;
    v_result blob;
    v_offset integer;
    v_buffer_size binary_integer := 48;
    v_buffer_varchar varchar2(48);
    v_buffer_raw raw(48);
  begin
    if p_clob_in is null then
      return null;
    end if;
    dbms_lob.createtemporary(v_blob, true);
    v_offset := 1;
    for i in 1 .. ceil(dbms_lob.getlength(p_clob_in) / v_buffer_size) loop
      dbms_lob.read(p_clob_in, v_buffer_size, v_offset, v_buffer_varchar);
      v_buffer_raw := utl_raw.cast_to_raw(v_buffer_varchar);
      v_buffer_raw := utl_encode.base64_decode(v_buffer_raw);
      dbms_lob.writeappend(v_blob, utl_raw.length(v_buffer_raw), v_buffer_raw);
      v_offset := v_offset + v_buffer_size;
    end loop;
    v_result := v_blob;
    dbms_lob.freetemporary(v_blob);
    return v_result;
  end decode_base64;

  function encode_base64(p_blob_in in blob) return clob is
    v_clob clob;
    v_result clob;
    v_offset integer;
    v_chunk_size binary_integer := (48 / 4) * 3;
    v_buffer_varchar varchar2(48);
    v_buffer_raw raw(48);
  begin
    if p_blob_in is null then
      return null;
    end if;
    dbms_lob.createtemporary(v_clob, true);
    v_offset := 1;
    for i in 1 .. ceil(dbms_lob.getlength(p_blob_in) / v_chunk_size) loop
      dbms_lob.read(p_blob_in, v_chunk_size, v_offset, v_buffer_raw);
      v_buffer_raw := utl_encode.base64_encode(v_buffer_raw);
      v_buffer_varchar := utl_raw.cast_to_varchar2(v_buffer_raw);
      dbms_lob.writeappend(v_clob, length(v_buffer_varchar), v_buffer_varchar);
      v_offset := v_offset + v_chunk_size;
    end loop;
    v_result := v_clob;
    dbms_lob.freetemporary(v_clob);
    return v_result;
  end encode_base64;
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "WKSP_SERVICESTAGE"."MRVL_PKG_GET_DOCUMENT" as

FUNCTION WS_FN_FILL_DOC (l_nit varchar2,l_doc_id varchar2) RETURN BOOLEAN
IS
pragma autonomous_transaction;

CURSOR c_getDocuments (vci_nit varchar2,vci_doc_id varchar2) IS
SELECT  DOC_FILE,DOC_MIMETYPE 
FROM MRVL_PIVOT_DOCUMENTS where DOC_NIT=vci_nit and ID_DOC=vci_doc_id
and DOC_TIMESTAMP=(select max(DOC_TIMESTAMP) from MRVL_PIVOT_DOCUMENTS WHERE DOC_NIT=vci_nit and ID_DOC=vci_doc_id);

cursor c_getDocumentStorage (vci_nit varchar2,vci_doc_id varchar2) IS
SELECT MIMETYPE,DOC_BLOB FROM (  
  SELECT '1' doc_id,DOC_1 DOC_BLOB,MIMETYPE_1 MIMETYPE FROM MRVL_PROVIDERS
  WHERE TAX_ID=vci_nit
  UNION ALL
  SELECT '2'doc_id,DOC_2,MIMETYPE_2 FROM MRVL_PROVIDERS
  WHERE TAX_ID=vci_nit
  UNION ALL
  SELECT '3' doc_id,DOC_3,MIMETYPE_3 FROM MRVL_PROVIDERS
  WHERE TAX_ID=vci_nit
  UNION ALL
  SELECT '4' doc_id,DOC_4,MIMETYPE_4 FROM MRVL_PROVIDERS
  WHERE TAX_ID=vci_nit
  UNION ALL
  SELECT '5' doc_id,DOC_5,MIMETYPE_5 FROM MRVL_PROVIDERS
  WHERE TAX_ID=vci_nit
  UNION ALL
  SELECT '6' doc_id,DOC_6,MIMETYPE_6 FROM MRVL_PROVIDERS
  WHERE TAX_ID=vci_nit
  UNION ALL
  SELECT '8' doc_id,DOC_8,MIMETYPE_8 FROM MRVL_PROVIDERS
  WHERE TAX_ID=vci_nit
  UNION ALL
  SELECT '9' doc_id,DOC_9,MIMETYPE_9 FROM MRVL_PROVIDERS
  WHERE TAX_ID=vci_nit
  )
  WHERE doc_id=vci_doc_id;

  l_getDocuments                 c_getDocuments%rowtype;
  l_getDocumentStorage           c_getDocumentStorage%rowtype;
  l_exists_c_getDocuments        boolean;
  l_exists_c_getDocumentStorage  boolean;

BEGIN
    OPEN c_getDocuments(l_nit,l_doc_id);
        FETCH c_getDocuments INTO l_getDocuments;
            l_exists_c_getDocuments := c_getDocuments%FOUND;
    CLOSE c_getDocuments;

    OPEN c_getDocumentStorage(l_nit,l_doc_id);
        FETCH c_getDocumentStorage INTO l_getDocumentStorage;
            l_exists_c_getDocumentStorage := c_getDocumentStorage%FOUND;
    CLOSE c_getDocumentStorage;

    IF l_exists_c_getDocuments THEN

        v_data_documents(1).l_mimetype:=l_getDocuments.DOC_MIMETYPE;
        v_data_documents(1).l_doc:=l_getDocuments.DOC_FILE;
        
    ELSIF l_exists_c_getDocuments=false and l_exists_c_getDocumentStorage THEN

        v_data_documents(1).l_mimetype:=l_getDocumentStorage.MIMETYPE;
        v_data_documents(1).l_doc:=l_getDocumentStorage.DOC_BLOB;

    END IF;

    RETURN TRUE;

END WS_FN_FILL_DOC;

FUNCTION WS_FN_GET_DOC (l_nit varchar2,l_doc_id varchar2) RETURN t_data_documents_return PIPELINED IS
pragma autonomous_transaction;

v_fill_data boolean;
l_index     PLS_INTEGER;
/*Variables para excepciones*/
err_num     NUMBER;
err_msg     VARCHAR2(255);
BEGIN
    v_fill_data:=WS_FN_FILL_DOC(l_nit,l_doc_id);
    IF v_fill_data THEN

        l_index:=v_data_documents.FIRST;

        IF v_data_documents.count > 0 THEN

            while (l_index IS NOT NULL)
            LOOP
                 pipe row(v_data_documents(l_index));
                 l_index:=v_data_documents.NEXT(l_index);
            END LOOP;

       END IF;

    END IF;
    RETURN;
END WS_FN_GET_DOC;

end "MRVL_PKG_GET_DOCUMENT";
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_DOCUMENT_TEMPLATE" ADD CONSTRAINT "MRVL_DOCUMENT_TEMPLATE_PK" PRIMARY KEY ("ID_MRVL_DOCUMENT_TEMPLATE")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_HISTORY" ADD CONSTRAINT "MRVL_HYSTORY_PK" PRIMARY KEY ("ID_MRVL_HISTORY")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_PROVIDERS" ADD CONSTRAINT "MRVL_PROVIDERS_PK" PRIMARY KEY ("ID_MRVL_PROVIDERS")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_USERS" ADD CONSTRAINT "MRVL_USERS_PK" PRIMARY KEY ("ID_MRVL_USER")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_ACCOUNTS_TYPE" ADD CONSTRAINT "MRVL_ACCOUNTS_TYPE_PK" PRIMARY KEY ("ID_MRVL_ACCOUNT_TYPE")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_ACTCIIU" ADD CONSTRAINT "MRVL_ACTCIIU_PK" PRIMARY KEY ("ID_MRVL_ACTCIIU")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_ACTIONS" ADD CONSTRAINT "MRVL_ACTIONS_PK" PRIMARY KEY ("ID_MRVL_ACTION")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_BANKS" ADD CONSTRAINT "MRVL_BANKS_PK" PRIMARY KEY ("ID_MRVL_BANK")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_CITIES" ADD CONSTRAINT "MRVL_CITIES_PK" PRIMARY KEY ("ID_MRVL_CITY")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_DEPARTMENTS" ADD CONSTRAINT "MRVL_DEPARTMENTS_PK" PRIMARY KEY ("ID_MRVL_DEPARTMENT")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_EMAIL" ADD CONSTRAINT "MRVL_EMAIL_PK" PRIMARY KEY ("ID_MRVL_EMAIL")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_PHONE" ADD CONSTRAINT "MRVL_PHONE_PK" PRIMARY KEY ("ID_MRVL_PHONE")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_ROLES" ADD CONSTRAINT "MRVL_ROLES_PK" PRIMARY KEY ("ID_MRVL_ROL")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_TYPE_EMAIL" ADD CONSTRAINT "MRVL_TYPE_EMAIL_PK" PRIMARY KEY ("ID_MRVL_TYPE_EMAIL")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_TYPE_PHONE" ADD CONSTRAINT "MRVL_TYPE_PHONE_PK" PRIMARY KEY ("ID_MRVL_TYPE_PHONE")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_TYPE_PROVIDER" ADD CONSTRAINT "MRVL_TYPE_PROVIDER_PK" PRIMARY KEY ("ID_MRVL_TYPE_PROVIDER")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_TYPE_TAX" ADD CONSTRAINT "MRVL_TYPE_TAX_PK" PRIMARY KEY ("ID_MRVL_TYPE_TAX")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_PROVIDERS" ADD CONSTRAINT "MRVL_PROVIDERS_TT_FK" FOREIGN KEY ("ID_MRVL_TYPE_TAX")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_TYPE_TAX" ("ID_MRVL_TYPE_TAX") ON DELETE CASCADE ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_PROVIDERS" ADD CONSTRAINT "MRVL_PROVIDERS_TP_FK" FOREIGN KEY ("ID_MRVL_TYPE_PROVIDER")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_TYPE_PROVIDER" ("ID_MRVL_TYPE_PROVIDER") ON DELETE CASCADE ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_PROVIDERS" ADD CONSTRAINT "MRVL_PROVIDERS_DP_FK" FOREIGN KEY ("ID_MRVL_DEPARTMENT")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_DEPARTMENTS" ("ID_MRVL_DEPARTMENT") ON DELETE CASCADE ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_PROVIDERS" ADD CONSTRAINT "MRVL_PROVIDERS_CT_FK" FOREIGN KEY ("ID_MRVL_CITY")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_CITIES" ("ID_MRVL_CITY") ON DELETE CASCADE ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_PROVIDERS" ADD CONSTRAINT "MRVL_PROVIDERS_AC_FK" FOREIGN KEY ("ID_MRVL_ACTCIIU")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_ACTCIIU" ("ID_MRVL_ACTCIIU") ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_PROVIDERS" ADD CONSTRAINT "MRVL_PROVIDERS_FK_TA" FOREIGN KEY ("ID_MRVL_ACCOUNT_TYPE")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_ACCOUNTS_TYPE" ("ID_MRVL_ACCOUNT_TYPE") ON DELETE CASCADE ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_PROVIDERS" ADD CONSTRAINT "MRVL_PROVIDERS_FK_B" FOREIGN KEY ("ID_MRVL_BANK")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_BANKS" ("ID_MRVL_BANK") ON DELETE CASCADE ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_CITIES" ADD CONSTRAINT "MRVL_CITIES_DP_FK" FOREIGN KEY ("ID_MRVL_DEPARTMENT")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_DEPARTMENTS" ("ID_MRVL_DEPARTMENT") ON DELETE CASCADE ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_EMAIL" ADD CONSTRAINT "MRVL_EMAIL_PD_FK" FOREIGN KEY ("ID_MRVL_PROVIDERS")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_PROVIDERS" ("ID_MRVL_PROVIDERS") ON DELETE CASCADE ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_EMAIL" ADD CONSTRAINT "MRVL_EMAIL_FK_TE" FOREIGN KEY ("ID_MRVL_TYPE_EMAIL")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_TYPE_EMAIL" ("ID_MRVL_TYPE_EMAIL") ON DELETE CASCADE ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_PHONE" ADD CONSTRAINT "MRVL_PHONE_PV_FK" FOREIGN KEY ("ID_MRVL_PROVIDERS")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_PROVIDERS" ("ID_MRVL_PROVIDERS") ON DELETE CASCADE ENABLE
/
ALTER TABLE "WKSP_SERVICESTAGE"."MRVL_PHONE" ADD CONSTRAINT "MRVL_PHONE_FK_TP" FOREIGN KEY ("ID_MRVL_TYPE_PHONE")
	  REFERENCES "WKSP_SERVICESTAGE"."MRVL_TYPE_PHONE" ("ID_MRVL_TYPE_PHONE") ON DELETE CASCADE ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER "WKSP_SERVICESTAGE"."BI_MRVL_EMAIL" 
  before insert on "MRVL_EMAIL"               
  for each row  
begin   
  if :NEW."ID_MRVL_EMAIL" is null then 
    select "MRVL_EMAIL_SEQ".nextval into :NEW."ID_MRVL_EMAIL" from sys.dual; 
  end if; 
end;

ALTER TRIGGER "WKSP_SERVICESTAGE"."BI_MRVL_EMAIL" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER "WKSP_SERVICESTAGE"."BI_MRVL_HISTORY" 
  before insert on "MRVL_HISTORY"               
  for each row  
begin   
  if :NEW."ID_MRVL_HISTORY" is null then 
    select "MRVL_HISTORY_SEQ".nextval into :NEW."ID_MRVL_HISTORY" from sys.dual; 
  end if; 
end;

ALTER TRIGGER "WKSP_SERVICESTAGE"."BI_MRVL_HISTORY" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER "WKSP_SERVICESTAGE"."BI_MRVL_PHONE" 
  before insert on "MRVL_PHONE"               
  for each row  
begin   
  if :NEW."ID_MRVL_PHONE" is null then 
    select "MRVL_PHONE_SEQ".nextval into :NEW."ID_MRVL_PHONE" from sys.dual; 
  end if; 
end;

ALTER TRIGGER "WKSP_SERVICESTAGE"."BI_MRVL_PHONE" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER "WKSP_SERVICESTAGE"."BI_MRVL_PROVIDERS" 
  before insert on "MRVL_PROVIDERS"               
  for each row  
begin   
  if :NEW."ID_MRVL_PROVIDERS" is null then 
    select "MRVL_PROVIDERS_SEQ".nextval into :NEW."ID_MRVL_PROVIDERS" from sys.dual; 
  end if; 
end;

ALTER TRIGGER "WKSP_SERVICESTAGE"."BI_MRVL_PROVIDERS" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER "WKSP_SERVICESTAGE"."BI_MRVL_USERS" 
  before insert on "MRVL_USERS"               
  for each row  
begin   
  if :NEW."ID_MRVL_USER" is null then 
    select "MRVL_USERS_SEQ".nextval into :NEW."ID_MRVL_USER" from sys.dual; 
  end if; 
end;

ALTER TRIGGER "WKSP_SERVICESTAGE"."BI_MRVL_USERS" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER "WKSP_SERVICESTAGE"."MRVL_AUDIT_CHANGES" 
after update ON MRVL_PROVIDERS for each row
begin
  
  
  if updating then
    
    IF :OLD.NAME_PROVIDER is null and :NEW.NAME_PROVIDER is not null or (:OLD.NAME_PROVIDER<>:NEW.NAME_PROVIDER) THEN

    INSERT INTO MRVL_AUDIT_FIELDS (COLUMN_NAME
                                    ,IS_MODIFIED
                                    ,TAX_ID
                                    ,CREATED_DATE)
                                    VALUES('NOMBRE'
                                           ,1
                                           ,:OLD.TAX_ID
                                           ,systimestamp);
    END IF;

    IF :OLD.ADDRES_PROVIDER is null and :NEW.ADDRES_PROVIDER is not null or (:OLD.ADDRES_PROVIDER<>:NEW.ADDRES_PROVIDER) THEN

    INSERT INTO MRVL_AUDIT_FIELDS (COLUMN_NAME
                                    ,IS_MODIFIED
                                    ,TAX_ID
                                    ,CREATED_DATE)
                                    VALUES('DIRECCION'
                                           ,1
                                           ,:OLD.TAX_ID
                                           ,systimestamp);
    END IF;

    IF :OLD.ID_MRVL_DEPARTMENT is null and :NEW.ID_MRVL_DEPARTMENT is not null or (:OLD.ID_MRVL_DEPARTMENT<>:NEW.ID_MRVL_DEPARTMENT) THEN

    INSERT INTO MRVL_AUDIT_FIELDS (COLUMN_NAME
                                    ,IS_MODIFIED
                                    ,TAX_ID
                                    ,CREATED_DATE)
                                    VALUES('DEPARTAMENTO'
                                           ,1
                                           ,:OLD.TAX_ID
                                           ,systimestamp);
    END IF;

    IF :OLD.ID_MRVL_CITY is null and :NEW.ID_MRVL_CITY is not null or (:OLD.ID_MRVL_CITY<>:NEW.ID_MRVL_CITY)THEN

    INSERT INTO MRVL_AUDIT_FIELDS (COLUMN_NAME
                                    ,IS_MODIFIED
                                    ,TAX_ID
                                    ,CREATED_DATE)
                                    VALUES('CIUDAD'
                                           ,1
                                           ,:OLD.TAX_ID
                                           ,systimestamp);
    END IF;

    IF :OLD.ID_MRVL_TYPE_PROVIDER<>:NEW.ID_MRVL_TYPE_PROVIDER THEN

    INSERT INTO MRVL_AUDIT_FIELDS (COLUMN_NAME
                                    ,IS_MODIFIED
                                    ,TAX_ID
                                    ,CREATED_DATE)
                                    VALUES('TIPO_PROVEEDOR'
                                           ,1
                                           ,:OLD.TAX_ID
                                           ,systimestamp);
    END IF;

    IF :OLD.ID_MRVL_TYPE_TAX<>:NEW.ID_MRVL_TYPE_TAX THEN

    INSERT INTO MRVL_AUDIT_FIELDS (COLUMN_NAME
                                    ,IS_MODIFIED
                                    ,TAX_ID
                                    ,CREATED_DATE)
                                    VALUES('TIPO_REGIMEN'
                                           ,1
                                           ,:OLD.TAX_ID
                                           ,systimestamp);
    END IF;
    
    IF :OLD.ID_MRVL_ACTCIIU<>:NEW.ID_MRVL_ACTCIIU THEN

    INSERT INTO MRVL_AUDIT_FIELDS (COLUMN_NAME
                                    ,IS_MODIFIED
                                    ,TAX_ID
                                    ,CREATED_DATE)
                                    VALUES('TIPO_CIIU'
                                           ,1
                                           ,:OLD.TAX_ID
                                           ,systimestamp);
    END IF;

    IF :OLD.RES_GRAN_CONTRI is null and :NEW.RES_GRAN_CONTRI is not null or (:OLD.RES_GRAN_CONTRI<>:NEW.RES_GRAN_CONTRI) THEN

    INSERT INTO MRVL_AUDIT_FIELDS (COLUMN_NAME
                                    ,IS_MODIFIED
                                    ,TAX_ID
                                    ,CREATED_DATE)
                                    VALUES('RES_GRAN_CON'
                                           ,1
                                           ,:OLD.TAX_ID
                                           ,systimestamp);
    END IF;

    IF (:OLD.FECHA_RESOLUCION) is null and  (:NEW.FECHA_RESOLUCION) is not null or ((:OLD.FECHA_RESOLUCION) <> (:NEW.FECHA_RESOLUCION))  THEN

    INSERT INTO MRVL_AUDIT_FIELDS (COLUMN_NAME
                                    ,IS_MODIFIED
                                    ,TAX_ID
                                    ,CREATED_DATE)
                                    VALUES('FECHA_RES_GRAN_CON'
                                           ,1
                                           ,:OLD.TAX_ID
                                           ,systimestamp);
    END IF;

    IF :OLD.RESP_AUTORRETENEDOR is null and :NEW.RESP_AUTORRETENEDOR is not null or (:OLD.RESP_AUTORRETENEDOR<>:NEW.RESP_AUTORRETENEDOR) THEN

    INSERT INTO MRVL_AUDIT_FIELDS (COLUMN_NAME
                                    ,IS_MODIFIED
                                    ,TAX_ID
                                    ,CREATED_DATE)
                                    VALUES('RESP_AUTORRETENEDOR'
                                           ,1
                                           ,:OLD.TAX_ID
                                           ,systimestamp);
    END IF;

    IF :OLD.FECHA_RESP_AUTORRETENEDOR is null and :NEW.FECHA_RESP_AUTORRETENEDOR is not null or (:OLD.FECHA_RESP_AUTORRETENEDOR<>:NEW.FECHA_RESP_AUTORRETENEDOR) THEN

    INSERT INTO MRVL_AUDIT_FIELDS (COLUMN_NAME
                                    ,IS_MODIFIED
                                    ,TAX_ID
                                    ,CREATED_DATE)
                                    VALUES('FECHA_RESP_AUTORRETENEDOR'
                                           ,1
                                           ,:OLD.TAX_ID
                                           ,systimestamp);
    END IF;

    IF :OLD.COMERCIAL_REGISTRATION is null and :NEW.COMERCIAL_REGISTRATION is not null or (:OLD.COMERCIAL_REGISTRATION<>:NEW.COMERCIAL_REGISTRATION) THEN

    INSERT INTO MRVL_AUDIT_FIELDS (COLUMN_NAME
                                    ,IS_MODIFIED
                                    ,TAX_ID
                                    ,CREATED_DATE)
                                    VALUES('MATRICULA_MERCANTIL'
                                           ,1
                                           ,:OLD.TAX_ID
                                           ,systimestamp);
    END IF;

    IF :OLD.COMERCIAL_REGISTRATION_DATE is null and :NEW.COMERCIAL_REGISTRATION_DATE is not null or (:OLD.COMERCIAL_REGISTRATION_DATE<>:NEW.COMERCIAL_REGISTRATION_DATE) THEN

    INSERT INTO MRVL_AUDIT_FIELDS (COLUMN_NAME
                                    ,IS_MODIFIED
                                    ,TAX_ID
                                    ,CREATED_DATE)
                                    VALUES('FECHA_MATRICULA_MERCANTIL'
                                           ,1
                                           ,:OLD.TAX_ID
                                           ,systimestamp);
    END IF;

    IF :OLD.LEGAL_REPRESENTATIVE is null and :NEW.LEGAL_REPRESENTATIVE is not null or (:OLD.LEGAL_REPRESENTATIVE<>:NEW.LEGAL_REPRESENTATIVE) THEN

    INSERT INTO MRVL_AUDIT_FIELDS (COLUMN_NAME
                                    ,IS_MODIFIED
                                    ,TAX_ID
                                    ,CREATED_DATE)
                                    VALUES('REPRESENTANTE_LEGAL'
                                           ,1
                                           ,:OLD.TAX_ID
                                           ,systimestamp);
    END IF;

    IF :OLD.ID_MRVL_BANK is null and :NEW.ID_MRVL_BANK is not null or (:OLD.ID_MRVL_BANK<>:NEW.ID_MRVL_BANK) THEN

    INSERT INTO MRVL_AUDIT_FIELDS (COLUMN_NAME
                                    ,IS_MODIFIED
                                    ,TAX_ID
                                    ,CREATED_DATE)
                                    VALUES('BANCO'
                                           ,1
                                           ,:OLD.TAX_ID
                                           ,systimestamp);
    END IF;

    IF :OLD.NOMBRE_TITULAR is null and :NEW.NOMBRE_TITULAR is not null or (:OLD.NOMBRE_TITULAR<>:NEW.NOMBRE_TITULAR) THEN

    INSERT INTO MRVL_AUDIT_FIELDS (COLUMN_NAME
                                    ,IS_MODIFIED
                                    ,TAX_ID
                                    ,CREATED_DATE)
                                    VALUES('NOMBRE_TITULAR'
                                           ,1
                                           ,:OLD.TAX_ID
                                           ,systimestamp);
    END IF;

    IF :OLD.NUMERO_CUENTA is null and :NEW.NUMERO_CUENTA is not null or (:OLD.NUMERO_CUENTA<>:NEW.NUMERO_CUENTA) THEN

    INSERT INTO MRVL_AUDIT_FIELDS (COLUMN_NAME
                                    ,IS_MODIFIED
                                    ,TAX_ID
                                    ,CREATED_DATE)
                                    VALUES('NUMERO_CUENTA'
                                           ,1
                                           ,:OLD.TAX_ID
                                           ,systimestamp);
    END IF;

    IF :OLD.ID_MRVL_ACCOUNT_TYPE is null and :NEW.ID_MRVL_ACCOUNT_TYPE is not null or (:OLD.ID_MRVL_ACCOUNT_TYPE<>:NEW.ID_MRVL_ACCOUNT_TYPE) THEN

    INSERT INTO MRVL_AUDIT_FIELDS (COLUMN_NAME
                                    ,IS_MODIFIED
                                    ,TAX_ID
                                    ,CREATED_DATE)
                                    VALUES('TIPO_CUENTA'
                                           ,1
                                           ,:OLD.TAX_ID
                                           ,systimestamp);
    END IF;

  end if;
  
end MRVL_AUDIT_CHANGES;
ALTER TRIGGER "WKSP_SERVICESTAGE"."MRVL_AUDIT_CHANGES" ENABLE
/
10 10
/

BEGIN 
dbms_cloud.create_credential('"GITHUB_CRED"', username=>'mzabala19@gmail.com', password=>'NULL', enabled=>TRUE, windows_domain=>NULL, comments=>'{"comments":"Created via DBMS_CLOUD.create_credential"}');
COMMIT; 
END;
/

BEGIN 
 
COMMIT; 
END;
/